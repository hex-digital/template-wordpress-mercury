<?xml version="1.0"?>
<ruleset name="Postlight PHPCS Config">
  <!--
    See also:
    https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
    https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage
  -->
  <description>Hex PHP WordPress coding standards configuration.</description>

  <!--
		 Trigger error if PHPCSUtils cannot be found.
		 PHPCSUtils does not contain any sniffs, so this rule isn't strictly necessary, but
		 by having this here anyway, if PHPCSUtils is missing, the user will get a
		 descriptive error message during the loading of the ruleset instead of
		 a fatal "class not found" error once the sniffs start running.
		 https://github.com/PHPCSStandards/PHPCSExtra
	-->
  <rule ref="PHPCSUtils" />

  <!-- Command line args, compare to: /vendor/bin/phpcs -(v)s -extensions=php -colors -->
  <arg value="s" />     <!-- Show sniffs report. -->
  <arg name="colors" /> <!-- Use colors in reports. -->
  <arg name="extensions" value="php" /> <!-- Sniff these file types. -->

  <!-- PHP Compatibility Test -->
  <config name="testVersion" value="7.4-"/>
  <rule ref="PHPCompatibilityWP">
    <include-pattern>*\.php$</include-pattern>
  </rule>

  <!-- WordPress compatibility and deprecation warnings -->
  <config name="minimum_supported_wp_version" value="5.5.3"/>

  <exclude-pattern>*/vendor/*</exclude-pattern>
  <exclude-pattern>*/node_modules/*</exclude-pattern>

  <!--
    ============================================================================
    PSR-2 ruleset:
    https://github.com/squizlabs/PHP_CodeSniffer/blob/master/src/Standards/PSR2/ruleset.xml
  -->
  <rule ref="PSR12">
    <!-- Excluded so we can add actions and their functions in the same file -->
    <exclude name="PSR1.Files.SideEffects.FoundWithSymbols" />
    <!-- Exclude as this is how WordPress gets template metadata. -->
    <exclude name="Squiz.Commenting.BlockComment.NoEmptyLineBefore" />
    <!-- WordPress functions are snake_case, not camelCase, so ours will be too -->
    <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps" />
  </rule>

  <rule ref="Generic.Files.LineLength">
    <properties>
      <!-- set soft line length limit -->
      <property name="lineLimit" value="160"/>
    </properties>
  </rule>

  <rule ref="Generic.Commenting">
    <exclude name="Generic.Commenting.DocComment.MissingShort" />
    <exclude name="Generic.Commenting.Fixme" />
    <exclude name="Generic.Commenting.Todo" />
  </rule>

  <rule ref="Generic.Arrays">
    <!-- Enforce short array tags -->
    <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found" />
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found" />
  </rule>

  <!-- Rule: In general, readability is more important than cleverness or brevity.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/607 -->
  <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
  <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

  <!-- Rule: Unless absolutely necessary, loose comparisons should not be used,
     as their behaviour can be misleading. -->
  <rule phpcs-only="true" ref="Universal.Operators.StrictComparisons">
    <type>warning</type>
  </rule>

  <rule ref="WordPress.WP.AlternativeFunctions" />
  <rule ref="WordPress.WP.DeprecatedFunctions" />
  <rule ref="WordPress.WP.DeprecatedClasses" />
  <rule ref="WordPress.WP.DeprecatedParameters" />
  <rule ref="WordPress.WP.DeprecatedParameterValues" />

  <!--
    ============================================================================
    Special or one-off rules.
  -->

  <!-- Normalize all require/require_onces to use statement, not function, syntax. -->
  <rule ref="PEAR.Files.IncludingFile.BracketsNotRequired" />
</ruleset>
